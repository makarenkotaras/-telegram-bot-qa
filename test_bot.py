import pytest
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from handlers import start, set_language, show_calendar, process_appointment, faq_answer
from unittest.mock import AsyncMock, MagicMock, ANY  # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç ANY


@pytest.mark.asyncio
async def test_start_command():
    update = MagicMock()
    update.message = MagicMock()
    update.message.text = "/start"
    update.message.reply_text = AsyncMock()

    await start(update, None)

    update.message.reply_text.assert_called_once_with(
        "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
        ])
    )


@pytest.mark.asyncio
async def test_set_language():
    query = MagicMock()
    query.data = "lang_ua"
    query.answer = AsyncMock()
    query.edit_message_text = AsyncMock()

    context = MagicMock()
    context.user_data = {}

    query.callback_query = query  # –î–æ–¥–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ update.callback_query

    await set_language(query, context)

    assert context.user_data["language"] == "ua"
    query.edit_message_text.assert_called_once_with(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ANY  # –î–æ–∑–≤–æ–ª—è—î –±—É–¥—å-—è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è reply_markup
    )


@pytest.mark.asyncio
async def test_show_calendar():
    query = MagicMock()
    query.answer = AsyncMock()
    query.edit_message_text = AsyncMock()

    query.callback_query = query  # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ

    await show_calendar(query, None)

    query.answer.assert_called_once()
    query.edit_message_text.assert_called_once()


@pytest.mark.asyncio
async def test_process_appointment():
    update = MagicMock()
    update.message = MagicMock()
    update.message.text = "–ó–∞–ø–∏—Å –Ω–∞ 10:00"
    update.message.reply_text = AsyncMock()

    await process_appointment(update, None)

    update.message.reply_text.assert_called_once_with("‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: –ó–∞–ø–∏—Å –Ω–∞ 10:00")


@pytest.mark.asyncio
async def test_faq_answer():
    query = MagicMock()
    query.data = "faq_0"
    query.answer = AsyncMock()
    query.edit_message_text = AsyncMock()

    query.callback_query = query  # –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏

    await faq_answer(query, None)

    query.answer.assert_called_once()
    query.edit_message_text.assert_called_once()
